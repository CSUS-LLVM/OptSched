#!/usr/bin/python3
'''*******************************************************************************
Description:    This script is meant to be used with the OptSched scheduler and
                the run-plaidbench.sh script. This script will extract basic stats
                about the benchmarks from the log files generated by the 
                run-plaidbench.sh script.
Author:	        Vang Thao
Last Update:	November 27, 2019
*******************************************************************************'''

'''
HOW TO USE:
    1.) Run a plaidbench benchmarks with run-plaidbench.sh to generate a
        directory containing the results for the run.
    2.) Copy this script to be in the same directory as the directory created.
        No other directory not generated by plaidbench.sh should be in the same
        location as this script.
    3.) Run this script to output the stats to the terminal.
'''

import os       # Used for scanning directories, getting paths, and checking files.
import re       # Used for parsing log file

REGEX_DAG_INFO = re.compile('Processing DAG (.*) with (\d+) insts and max latency (\d+)')
REGEX_PASS_NUM = re.compile(r"End of (.*) pass through")

# Contains all of the stats
benchStats = {}

# List of benchmark names
benchmarks = [
    "densenet121",
    "densenet169",
    "densenet201",
    "inception_resnet_v2",
    "inception_v3",
    "mobilenet",
    "nasnet_large",
    "nasnet_mobile",
    "resnet50",
    "vgg16",
    "vgg19",
    "xception",
    "imdb_lstm",
]

# Get name of all directories in current folder
subfolders = [f.name for f in os.scandir(".") if f.is_dir() ]

# For each folder
for folderName in subfolders:
    # Get the run number from the end
    # of the folder name
    runNumber = folderName[-2:]

    # Get the name of the run
    # and exclude the run number
    nameOfRun = folderName[:-3]
        
    # Create an entry in the stats for the
    # name of the run
    if (nameOfRun not in benchStats):
        benchStats[nameOfRun] = {}

    # Begin stats collection for this run
    numOfBenchmarks = 0
    totalKernels = 0
    totalInsts = 0
    totalRegions = 0
    maxRegionSize = -1
   
    for bench in benchmarks:
        currentPath = os.path.join(folderName, bench)
        currentLogFile = os.path.join(currentPath, bench + ".log")
        
        benchKernels = []
        benchRegions = 0
        benchInst = 0
        benchMaxRegionSize = -1

        # first check if log file exists.
        if (os.path.exists(currentLogFile)):
            numOfBenchmarks += 1
            benchStats[bench] = {}
            # Open log file if it exists.
            with open(currentLogFile) as file:

                # Read the whole log file
                # and split the scheduling
                # regions into a list
                log = file.read()
                blocks = log.split("********** Opt Scheduling **********")[1:]

                # Iterate over each scheduling region
                for block in blocks:
                    # Get pass num
                    getPass = REGEX_PASS_NUM.search(block)
                    passNum = getPass.group(1)

                    # Ignore second pass since it should
                    # have the same stats as first
                    if (passNum == "second"):
                        continue

                    # Get DAG stats
                    dagStats = REGEX_DAG_INFO.search(block)
                    dagName = dagStats.group(1)
                    inst = dagStats.group(2)

                    # Split kernel name from its region number
                    names = dagName.split(":")
                    kernelName = names[0]

                    # Add new kernels to list of kernels
                    if (kernelName not in benchKernels):
                        benchKernels.append(kernelName)

                    benchInst += int(inst)
                    benchRegions += 1
                    if (int(inst) > benchMaxRegionSize):
                        benchMaxRegionSize = int(inst)
                                                          
        # If the file doesn't exist, output error log.
        else:
            print("Cannot find log file for {} run {} benchmark {}.".format(nameOfRun, runNumber, bench))

        # Save stats for this benchmark inside benchStats
        benchStats[bench]["regions"] = benchRegions
        benchStats[bench]["insts"] = benchInst
        benchStats[bench]["kernels]"] = len(benchKernels)
        benchStats[bench]["maxRegionSize"] = benchMaxRegionSize
        
        # Record global stat
        totalKernels += benchStats[bench]["kernels]"]
        totalInsts += benchStats[bench]["insts"]
        totalRegions += benchStats[bench]["regions"]
        if (benchStats[bench]["maxRegionSize"] > maxRegionSize):
            maxRegionSize = benchStats[bench]["maxRegionSize"]

    print("{}".format(folderName))
    print("    Total number of benchmarks: {}".format(numOfBenchmarks))
    print("    Total kernels: {}".format(totalKernels))
    print("    Total regions: {}".format(totalRegions))
    print("    Total instructions: {}".format(totalInsts))
    print("    Average Region Size {:0.1f}".format(float(totalInsts)/float(totalRegions)))
    print("    Max region size: {}".format(maxRegionSize))
