#!/usr/bin/python3
'''
**********************************************************************************
Description:    This script is meant to be used with the OptSched scheduler and
                the run-plaidbench.sh script. This script will extract basic stats
                about the benchmarks from the log files generated by the
                run-plaidbench.sh script.
Author:         Vang Thao
Last Update:    December 30, 2019
**********************************************************************************

OUTPUT:
    This script takes in data from plaidbench runs and output a single spreadsheet.
        Spreadsheet 1: benchmarks-stats.xlsx

Requirements:
    - python3
    - pip3
    - openpyxl (sreadsheet module, installed using pip3)

HOW TO USE:
    1.) Run a plaidbench benchmarks with run-plaidbench.sh to generate a
        directory containing the results for the run.
    2.) Pass the path to the directory as an input to this script with
        the -i option.

Example:
    ./get-benchmarks-stats.py -i /home/tom/plaidbench-optsched-01/

    where plaidbench-optsched-01/ contains
        densenet121
        densenet169
        ...
        ...
'''

import os       # Used for scanning directories, getting paths, and checking files.
import re       # Used for parsing log file
from openpyxl import Workbook
from openpyxl.styles import Font
import argparse

RE_DAG_INFO = re.compile(r'Processing DAG (.*) with (\d+) insts and max latency (\d+)')
RE_PASS_NUM = re.compile(r'End of (.*) pass through')

# Contains all of the stats
benchStats = {}
# Contain cumulative stats for the run
cumulativeStats = {}

# List of benchmark names
benchmarks = [
    'densenet121',
    'densenet169',
    'densenet201',
    'inception_resnet_v2',
    'inception_v3',
    'mobilenet',
    'nasnet_large',
    'nasnet_mobile',
    'resnet50',
    'vgg16',
    'vgg19',
    'xception',
    'imdb_lstm',
]

def parseStats(inputFolder):
    # Overall stats for the benchmark suite
    cumulativeStats['numOfBenchmarks'] = 0
    cumulativeStats['totalKernels'] = 0
    cumulativeStats['totalInsts'] = 0
    cumulativeStats['totalRegions'] = 0
    cumulativeStats['maxRegionSize'] = -1
    cumulativeStats['maxRegionSize'] = -1
    cumulativeStats['averageRegionSize'] = 0

    # Begin stats collection for this run
    for bench in benchmarks:
        # Get the path to the log file
        currentPath = os.path.join(inputFolder, bench)
        currentLogFile = os.path.join(currentPath, bench + '.log')

        stats = {}
        stats['kernels'] = []
        stats['regions'] = 0
        stats['inst'] = 0
        stats['average'] = 0
        stats['maxRegionSize'] = 0

        # first check if log file exists.
        if (os.path.exists(currentLogFile)):
            cumulativeStats['numOfBenchmarks'] += 1
            # Open log file if it exists.
            with open(currentLogFile) as file:
                # Read the whole log file
                # and split the scheduling
                # regions into a list
                log = file.read()
                blocks = log.split('********** Opt Scheduling **********')[1:]

                # Iterate over each scheduling region
                for block in blocks:
                # Ignore second pass since it should
                # have the same stats as first
                    getPassNum = RE_PASS_NUM.search(block)
                    if (getPassNum):
                        passNum = getPassNum.group(1)
                        if passNum == 'second':
                            continue

                    # Get DAG stats
                    dagStats = RE_DAG_INFO.search(block)
                    dagName = dagStats.group(1)
                    inst = dagStats.group(2)

                    # Split kernel name from its region number
                    names = dagName.split(':')
                    kernelName = names[0]

                    # Add new kernels to list of kernels
                    if (kernelName not in stats['kernels']):
                        stats['kernels'].append(kernelName)

                    stats['inst'] += int(inst)
                    stats['regions'] += 1
                    if (int(inst) > stats['maxRegionSize']):
                        stats['maxRegionSize'] = int(inst)

                stats['average'] = stats['inst']/float(stats['regions'])

        # If the file doesn't exist, output error log.
        else:
            print('Cannot find log file for benchmark {}.'.format(bench))

        # Save stats for this benchmark inside benchStats
        benchStats[bench] = stats

        # Record overall stat
        cumulativeStats['totalKernels'] += len(stats['kernels'])
        cumulativeStats['totalInsts'] += stats['inst']
        cumulativeStats['totalRegions'] += stats['regions']
        if (cumulativeStats['maxRegionSize'] < stats['maxRegionSize']):
            cumulativeStats['maxRegionSize'] = stats['maxRegionSize']

    cumulativeStats['averageRegionSize'] = cumulativeStats['totalInsts']/float(cumulativeStats['totalRegions'])

def printStats():
    print('Benchmark Stats')
    print('    Total number of benchmarks: {}'.format(cumulativeStats['numOfBenchmarks']))
    print('    Total kernels: {}'.format(cumulativeStats['totalKernels']))
    print('    Total regions: {}'.format(cumulativeStats['totalRegions']))
    print('    Total instructions: {}'.format(cumulativeStats['totalInsts']))
    print('    Average Region Size {:0.1f}'.format(cumulativeStats['averageRegionSize']))
    print('    Max region size: {}'.format(cumulativeStats['maxRegionSize']))

def createSpreadsheets(output):
    if 'xls' not in output[-4:]:
        output += '.xlsx'

    # Create new excel worksheet
    wb = Workbook()

    # Grab the active worksheet
    ws = wb.active

    # Insert title and benchmark names
    ws['A1'] = 'Benchmarks'
    ws['A1'].font = Font(bold=True)

    row = 3
    for bench in benchmarks:
        ws['A' + str(row)] = bench
        row += 1

    ws['A' + str(row)] = 'Total'
    ws['A' + str(row)].font = Font(bold=True)

    # Stats entry
    col = 'B'
    row = 1
    ws[col + str(row)] = 'Benchmark Stats'
    row = 2
    ws[col+str(row)] = 'Kernels'
    ws[chr(ord(col)+1)+str(row)] = 'Scheduling Regions'
    ws[chr(ord(col)+2)+str(row)] = 'Instructions'
    ws[chr(ord(col)+3)+str(row)] = 'Average Region Size'
    ws[chr(ord(col)+4)+str(row)] = 'Max Region Size'

    row = 3
    for bench in benchmarks:
        ws[col+str(row)] = len(benchStats[bench]['kernels'])
        ws[chr(ord(col)+1)+str(row)] = benchStats[bench]['regions']
        ws[chr(ord(col)+2)+str(row)] = benchStats[bench]['inst']
        ws[chr(ord(col)+3)+str(row)] = benchStats[bench]['average']
        ws[chr(ord(col)+4)+str(row)] = benchStats[bench]['maxRegionSize']
        row += 1

    ws[col+str(row)] = cumulativeStats['totalKernels']
    ws[chr(ord(col)+1)+str(row)] = cumulativeStats['totalRegions']
    ws[chr(ord(col)+2)+str(row)] = cumulativeStats['totalInsts']
    ws[chr(ord(col)+3)+str(row)] = cumulativeStats['averageRegionSize']
    ws[chr(ord(col)+4)+str(row)] = cumulativeStats['maxRegionSize']

    wb.save(output)

def main(args):
    # Start stats collection
    parseStats(args.inputFolder)

    if args.verbose:
        printStats()

    if not args.disable:
        createSpreadsheets(args.output)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Script to extract benchmarks stats', \
                                      formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('--verbose', '-v',
                        action='store_true', default=False,
                        dest='verbose',
                        help='Print the stats to terminal')

    parser.add_argument('--output', '-o',
                        default='benchmarks-stats',
                        dest='output',
                        help='Output spreadsheet filepath')

    parser.add_argument('--disable', '-d',
                        action='store_true', default=False,
                        dest='disable',
                        help='Disable spreadsheet output.')

    parser.add_argument('--input', '-i',
                        default='.',
                        dest='inputFolder',
                        help='The path to scan for benchmark directories')

    args = parser.parse_args()

    main(args)
